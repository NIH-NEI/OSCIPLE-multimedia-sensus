import csv, argparse, time, datetime
from time_estimate import *

def dupefinder(hashcsvfile, dupefilepath, filetype, alltypes=False):

	with open(hashcsvfile, "r") as hashfile:
		hashes = hashfile.readlines()

	with open(dupefilepath, "w", newline='') as dupefile:
		rofl = csv.writer(dupefile)
		startTime = time.time()
		for i in range(0, len(hashes)):

			printTimeEstimate(i, len(hashes), startTime)
			hash = hashes[i].split(",")
			# print ("hash3: {hash3}   filetype: {filetype}".format(hash3=hash[3], filetype=filetype))
			if hash[3].rstrip() == filetype:
				for j in range(0, len(hashes)):
					comparehash = hashes[j].split(",")
					if comparehash[3].rstrip() == filetype or alltypes:
						if i != j and hash[0].find(".DS_Store") == -1 and hash[0].find(".Spotlight-V100") == -1 and hash[0].find(".Trashes") == -1 and comparehash[0].find(".DS_Store") == -1 and comparehash[0].find(".Spotlight-V100") == -1 and comparehash[0].find(".Trashes") == -1:
							# print (comparehash)
							try:
								if hash[1] == comparehash[1] and hash[2] == comparehash[2]:
									print ("dupe detected: {name}, {name2}".format(name = hash[0], name2 = comparehash[0]))
									rofl.writerow([hash[0], comparehash[0], hash[1], hash[2]])
							except IndexError:
								pass
	
	print ("Generated {file}".format(file=dupefilepath))
	
	
if __name__ == "__main__":
	parser = argparse.ArgumentParser(prog="Dupefinder",
								  description="Given a CSV of file hashes generated by Hashmaker, will find all duplicates.  Will probably need a pass through dupe-dupe-checker afterwards.")
	parser.add_argument('hashcsvfile', help="Input CSV file containing hashes")
	parser.add_argument('dupefilepath', help="Output CSV containing all duplicates")
	parser.add_argument('--filetype', help="Which file extension should be compared (hashfiles can have multiple but this detects only one at a time)", default="")
	parser.add_argument('--alltypes', help="Scan all files", default="")
	args = parser.parse_args()
 
	dupefinder(args.hashcsvfile, args.dupefilepath, args.filetype, args.alltypes == "true")